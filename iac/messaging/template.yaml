---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS End User Messaging Infrastructure for Contact Forms'

Parameters:
  OrganizationTag:
    Type: String
    Description: Organization tag value
    Default: "flatstone services"
    
  BusinessUnitTag:
    Type: String
    Description: Business unit tag value
    Default: "marketing"
    
  EnvironmentTag:
    Type: String
    Description: Environment tag value
    Default: "dev"

  EmailDestination:
    Type: String
    Description: Destination email address for contact form submissions
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"

  SmsDestination:
    Type: String
    Description: Destination phone number for SMS messages (E.164 format)
    AllowedPattern: "^\\+1[0-9]{10}$"
    Default: "+18005551234"

  SmsCountry:
    Type: String
    Description: Country code for SMS messages (ISO 3166-1 alpha-2 code)
    Default: "US"
    AllowedValues:
      - "US"
      
  SmsOriginatorId:
    Type: String
    Description: Originator ID for SMS messages (required by AWS End User Messaging)
    Default: "ContactForm"
    MaxLength: 11
    AllowedPattern: "^[a-zA-Z0-9]{1,11}$"
      
  StaticWebsiteStackName:
    Type: String
    Description: Name of the static website CloudFormation stack to update with the messaging API endpoint
    Default: ""
    
  ContactLogRetentionDays:
    Type: Number
    Description: Number of days to retain contact logs in CloudWatch
    Default: 30
    MinValue: 1
    MaxValue: 365
    
  VpcId:
    Type: String
    Description: VPC ID from the static website stack
    Default: ""
    
  PrivateSubnet1Id:
    Type: String
    Description: Private Subnet 1 ID from the static website stack
    Default: ""
    
  PrivateSubnet2Id:
    Type: String
    Description: Private Subnet 2 ID from the static website stack
    Default: ""

Conditions:
  HasVpcConfig: !And 
    - !Not [!Equals [!Ref VpcId, ""]]
    - !Not [!Equals [!Ref PrivateSubnet1Id, ""]]
    - !Not [!Equals [!Ref PrivateSubnet2Id, ""]]

Resources:
  # Security Group for Lambda function
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasVpcConfig
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # KMS Key for encryption
  MessagingKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for messaging service encryption"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # DynamoDB Table for storing contact form submissions
  ContactFormTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-ContactFormSubmissions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref MessagingKMSKey
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # SMS Resources using SNS
  SmsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Contact Form SMS"
      KmsMasterKeyId: !Ref MessagingKMSKey
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag
          
  SmsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sms
      Endpoint: !Ref SmsDestination
      TopicArn: !Ref SmsTopic

  # SES Email Identity
  EmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref EmailDestination

  # SNS Topic for notifications
  ContactFormTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Contact Form Notifications"
      KmsMasterKeyId: !Ref MessagingKMSKey
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # Dead Letter Queue for failed messages
  ContactFormDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MessagingKMSKey
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # Lambda Function for processing contact form submissions
  ContactFormLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If [HasVpcConfig, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole, !Ref "AWS::NoValue"]
      Policies:
        - PolicyName: ContactFormPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: 
                  - !Ref ContactFormTopic
                  - !Ref SmsTopic
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailDestination}"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt MessagingKMSKey.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt ContactFormDLQ.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt ContactFormTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  ContactFormFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ContactFormLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const AWS = require('aws-sdk');
            const sns = new AWS.SNS();
            const ses = new AWS.SES();
            const dynamodb = new AWS.DynamoDB.DocumentClient();
            const { v4: uuidv4 } = require('uuid');
            
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
              'Access-Control-Allow-Methods': 'OPTIONS,POST'
            };
            
            // Extract client information
            const clientIp = event.requestContext?.identity?.sourceIp || 'unknown';
            const userAgent = event.requestContext?.identity?.userAgent || 'unknown';
            const requestTime = event.requestContext?.requestTime || new Date().toISOString();
            
            console.log('Contact form submission received:', {
              clientIp,
              userAgent,
              requestTime,
              httpMethod: event.httpMethod
            });
            
            if (event.httpMethod === 'OPTIONS') {
              console.log('Handling OPTIONS request');
              return {
                statusCode: 200,
                headers: headers,
                body: ''
              };
            }
            
            try {
              const body = JSON.parse(event.body);
              const { messageType, message } = body;
              
              // Generate a unique ID for this submission
              const submissionId = uuidv4();
              const timestamp = new Date().toISOString();
              
              // Log the message details
              console.log('Processing contact form submission:', {
                submissionId,
                messageType,
                clientIp,
                userAgent,
                messagePreview: message.substring(0, 100) + (message.length > 100 ? '...' : '')
              });
              
              // Store in DynamoDB
              const ttl = Math.floor(Date.now() / 1000) + (365 * 24 * 60 * 60); // 1 year TTL
              const dbItem = {
                id: submissionId,
                timestamp: timestamp,
                messageType: messageType,
                message: message,
                clientIp: clientIp,
                userAgent: userAgent,
                ttl: ttl
              };
              
              try {
                await dynamodb.put({
                  TableName: process.env.CONTACT_FORM_TABLE,
                  Item: dbItem
                }).promise();
                console.log(`Successfully stored submission ${submissionId} in DynamoDB`);
              } catch (dbError) {
                console.error('Error storing submission in DynamoDB:', dbError);
                // Continue processing even if DynamoDB storage fails
              }
              
              if (messageType === 'email') {
                try {
                  await ses.sendEmail({
                    Destination: { ToAddresses: [process.env.EMAIL_DESTINATION] },
                    Message: {
                      Body: { 
                        Text: { 
                          Data: `Message: ${message}\n\nSubmitted from: ${clientIp}\nBrowser: ${userAgent}\nTime: ${timestamp}` 
                        }
                      },
                      Subject: { Data: 'New Contact Form Submission' }
                    },
                    Source: process.env.EMAIL_DESTINATION
                  }).promise();
                  console.log('Email sent successfully to:', process.env.EMAIL_DESTINATION);
                } catch (emailError) {
                  console.error('Failed to send email:', emailError);
                  console.error('Email destination:', process.env.EMAIL_DESTINATION);
                  console.error('Email content:', message.substring(0, 100) + '...');
                  throw emailError;
                }
              } else if (messageType === 'sms') {
                // Use SNS to send SMS with AWS End User Messaging originator ID
                try {
                  await sns.publish({
                    TopicArn: process.env.SMS_TOPIC_ARN,
                    Message: `${message}\n\nFrom: ${clientIp}`,
                    MessageAttributes: {
                      'AWS.SNS.SMS.SenderID': {
                        DataType: 'String',
                        StringValue: process.env.SMS_ORIGINATOR_ID
                      },
                      'AWS.SNS.SMS.SMSType': {
                        DataType: 'String',
                        StringValue: 'Transactional'
                      },
                      'AWS.MM.SMS.OriginationNumber': {
                        DataType: 'String',
                        StringValue: process.env.SMS_ORIGINATOR_ID
                      }
                    }
                  }).promise();
                  console.log('SMS sent successfully to topic:', process.env.SMS_TOPIC_ARN);
                  console.log('SMS destination:', process.env.SMS_DESTINATION);
                } catch (smsError) {
                  console.error('Failed to send SMS:', smsError);
                  console.error('SMS topic ARN:', process.env.SMS_TOPIC_ARN);
                  console.error('SMS destination:', process.env.SMS_DESTINATION);
                  console.error('SMS originator ID:', process.env.SMS_ORIGINATOR_ID);
                  console.error('SMS content:', message.substring(0, 100) + '...');
                  throw smsError;
                }
              }
              
              console.log(`Successfully processed ${messageType} submission ${submissionId}`);
              return {
                statusCode: 200,
                headers: headers,
                body: JSON.stringify({ 
                  message: 'Message sent successfully',
                  submissionId: submissionId
                })
              };
            } catch (error) {
              console.error('Error in contact form handler:', error);
              return {
                statusCode: 500,
                headers: headers,
                body: JSON.stringify({ error: error.message })
              };
            }
          }
      Runtime: nodejs20.x
      Environment:
        Variables:
          EMAIL_DESTINATION: !Ref EmailDestination
          SMS_DESTINATION: !Ref SmsDestination
          SMS_TOPIC_ARN: !Ref SmsTopic
          SMS_ORIGINATOR_ID: !Ref SmsOriginatorId
          CONTACT_FORM_TABLE: !Ref ContactFormTable
      KmsKeyArn: !GetAtt MessagingKMSKey.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt ContactFormDLQ.Arn
      VpcConfig: !If
        - HasVpcConfig
        - SecurityGroupIds: 
            - !Ref LambdaSecurityGroup
          SubnetIds: 
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
        - !Ref "AWS::NoValue"
      ReservedConcurrentExecutions: 10
      MemorySize: 128
      Timeout: 30
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # CloudWatch Log Group for Lambda function
  ContactFormLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ContactFormFunction}"
      RetentionInDays: !Ref ContactLogRetentionDays
      KmsKeyId: !GetAtt MessagingKMSKey.Arn

  # API Gateway for the contact form
  ContactFormApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "Contact Form API"
      Description: "API for handling contact form submissions"
      EndpointConfiguration:
        Types: ["REGIONAL"]
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  ContactFormResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ContactFormApi
      ParentId: !GetAtt ContactFormApi.RootResourceId
      PathPart: "contact"

  ContactFormMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ContactFormResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFormFunction.Arn}/invocations"

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ContactFormFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactFormApi}/*"

  # CORS Configuration
  ContactFormOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ContactFormResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ContactFormMethod
      - ContactFormOptionsMethod
    Properties:
      RestApiId: !Ref ContactFormApi
      Description: "Production deployment for contact form API"

  # IAM Role for API Gateway CloudWatch Logs
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: "organization"
          Value: !Ref OrganizationTag
        - Key: "business_unit"
          Value: !Ref BusinessUnitTag
        - Key: "environment"
          Value: !Ref EnvironmentTag

  # Configure API Gateway Account settings for CloudWatch Logs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ContactFormApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: "prod"
      CacheClusterEnabled: false
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt MessagingKMSKey.Arn

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for contact form"
    Value: !Sub "https://${ContactFormApi}.execute-api.${AWS::Region}.amazonaws.com/prod/contact"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  ContactFormTopicArn:
    Description: "ARN of the SNS topic for contact form notifications"
    Value: !Ref ContactFormTopic
    Export:
      Name: !Sub "${AWS::StackName}-ContactFormTopicArn"
  
  SmsTopicArn:
    Description: "ARN of the SNS topic for SMS messages"
    Value: !Ref SmsTopic
    Export:
      Name: !Sub "${AWS::StackName}-SmsTopicArn"
  
  EmailIdentity:
    Description: "Email identity for contact form"
    Value: !Ref EmailIdentity
    Export:
      Name: !Sub "${AWS::StackName}-EmailIdentity"
      
  ContactFormTableName:
    Description: "Name of the DynamoDB table for contact form submissions"
    Value: !Ref ContactFormTable
    Export:
      Name: !Sub "${AWS::StackName}-ContactFormTableName"
      
  ContactFormFunctionArn:
    Description: "ARN of the Lambda function for contact form"
    Value: !GetAtt ContactFormFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ContactFormFunctionArn"
      
  ContactFormApiId:
    Description: "ID of the API Gateway for contact form"
    Value: !Ref ContactFormApi
    Export:
      Name: !Sub "${AWS::StackName}-ContactFormApiId"